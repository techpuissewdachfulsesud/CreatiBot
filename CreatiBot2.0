<!DOCTYPE html> <html lang = "cs" > <head> <meta charset = "UTF-8" > <meta name = "viewport" content = "width=device-width, initial-scale=1.0" > <title> CreatiCore 2.1 </title> <style> :root { --background-light : #f8f9fa ; --background-dark : #1e1e1e ; --text-light : #333 ; --text-dark : #f8f9fa ; --user-bubble-light : #d1e7dd ; --user-bubble-dark : #2a6b55 ; --bot-bubble-light : #cfe2ff ; --bot-bubble-dark : #1a4a8e ; --accent-color : #007bff ; --accent-hover : #0056b3 ; --header-border-light : #eee ; --header-border-dark : #444 ; --container-bg-light : white; --container-bg-dark : #2a2a2a ; --input-border-light : #ccc ; --input-border-dark : #555 ; --transition-speed : 0.3s ; --button-shadow : 0 2px 5px rgba ( 0 , 0 , 0 , 0.2 ); --button-active-scale : 0.95 ; --font-size-base : 16px ; --loading-dot-color : #888 ; --tooltip-bg : #333 ; --tooltip-text : #fff ; --favorite-color : #ffd700 ; --edited-color : #888 ; /* Nov√© promƒõnn√© */ --pinned-color : #ff4500 ; --category-bg : #6c757d ;         } body { font-family : 'Segoe UI' , Arial, sans-serif; margin : 0 ; padding : 0 ; background-color : var (--background-light); color : var (--text-light); transition : background-color var (--transition-speed), color var (--transition-speed); line-height : 1.6 ; font-size : var (--font-size-base);         } .dark-mode { background-color : var (--background-dark); color : var (--text-dark);         } .main-container { max-width : 800px ; margin : 20px auto; padding : 20px ; border-radius : 12px ; background-color : var (--container-bg-light); box-shadow : 0 6px 24px rgba ( 0 , 0 , 0 , 0.15 ); transition : background-color var (--transition-speed), box-shadow var (--transition-speed);         } .dark-mode .main-container { background-color : var (--container-bg-dark); box-shadow : 0 6px 24px rgba ( 0 , 0 , 0 , 0.3 );         } .header { text-align : center; margin-bottom : 20px ; padding-bottom : 15px ; border-bottom : 1px solid var (--header-border-light); transition : border-bottom-color var (--transition-speed);         } .dark-mode .header { border-bottom : 1px solid var (--header-border-dark);         } .header h1 { font-size : 32px ; margin : 0 0 10px 0 ; color : var (--accent-color); transition : color var (--transition-speed);         } .dark-mode .header h1 { color : #4da3ff ;         } .header .version { font-size : 14px ; color : #6c757d ; margin-bottom : 5px ; transition : color var (--transition-speed);         } .dark-mode .header .version { color : #adb5bd ;         } .message-count { font-size : 12px ; color : #6c757d ; margin-top : 5px ;         } .dark-mode .message-count { color : #adb5bd ;         } .button-toolbar { display : flex; flex-wrap : wrap; justify-content : center; gap : 10px ; margin-bottom : 20px ; position : relative;         } .button-toolbar button { flex : 1 1 auto; min-width : 120px ; padding : 12px 20px ; border : none; background-color : var (--accent-color); color : white; border-radius : 18px ; cursor : pointer; font-size : 16px ; transition : background-color var (--transition-speed), transform var (--transition-speed); box-shadow : var (--button-shadow); position : relative;         } .button-toolbar button :hover { background-color : var (--accent-hover); transform : scale ( 1.05 );         } .button-toolbar button :active { transform : scale ( var (--button-active-scale));         } .button-toolbar button [title] :hover::after { content : attr (title); position : absolute; bottom : - 35px ; left : 50% ; transform : translateX (- 50% ); background-color : var (--tooltip-bg); color : var (--tooltip-text); padding : 5px 10px ; border-radius : 6px ; font-size : 12px ; white-space : nowrap; z-index : 10 ;         } .dark-mode .button-toolbar button [title] :hover::after { background-color : #555 ;         } .chat-container { max-width : 100% ; margin : 0 auto; padding : 15px ; border-radius : 8px ; background-color : var (--container-bg-light); box-shadow : 0 4px 12px rgba ( 0 , 0 , 0 , 0.08 ); overflow-y : auto; max-height : 400px ; transition : background-color var (--transition-speed), box-shadow var (--transition-speed); position : relative;         } .dark-mode .chat-container { background-color : var (--container-bg-dark); box-shadow : 0 4px 12px rgba ( 0 , 0 , 0 , 0.2 );         } .message { margin : 15px 0 ; padding : 12px ; border-radius : 18px ; opacity : 0 ; animation : slideIn 0.4s forwards; word-wrap : break-word; transition : transform 0.1s , box-shadow 0.2s ; background : linear-gradient ( 135deg , var (--user-bubble-light) 0% , #e6f0ea 100% ); cursor : move; position : relative;         } .dark-mode .message { background : linear-gradient ( 135deg , var (--user-bubble-dark) 0% , #3a7b65 100% );         } .message.bot { background : linear-gradient ( 135deg , var (--bot-bubble-light) 0% , #e0eaff 100% );         } .dark-mode .message.bot { background : linear-gradient ( 135deg , var (--bot-bubble-dark) 0% , #2b5b9e 100% );         } .message:hover { transform : translateY (- 2px ); box-shadow : 0 3px 8px rgba ( 0 , 0 , 0 , 0.1 );         } .dark-mode .message:hover { box-shadow : 0 3px 8px rgba ( 255 , 255 , 255 , 0.1 );         } .user { text-align : right; margin-left : 20% ; border-bottom-right-radius : 4px ;         } .bot { text-align : left; margin-right : 20% ; border-bottom-left-radius : 4px ;         } .favorite { border-left : 4px solid var (--favorite-color);         } .pinned { border-top : 4px solid var (--pinned-color); order : - 1 ; /* P≈ôipnut√© zpr√°vy se ≈ôad√≠ nahoru */ } .msg-time { font-size : 12px ; color : #777 ; margin-top : 5px ; text-align : right;         } .dark-mode .msg-time { color : #aaa ;         } .category { display : inline-block; padding : 2px 6px ; border-radius : 10px ; font-size : 10px ; margin-right : 5px ; background-color : var (--category-bg); color : white;         } .edited::after { content : " (Upraveno)" ; font-size : 10px ; color : var (--edited-color); margin-left : 5px ;         } .loading { font-style : italic; color : var (--loading-dot-color); text-align : center; animation : dots 1.5s infinite;         } /* Markdown styly */ .message strong { font-weight : bold;         } .message em { font-style : italic;         } @keyframes dots {             0% { content : "." ; }             33% { content : ".." ; }             66% { content : "..." ; }         } @keyframes slideIn { from { opacity : 0 ; transform : translateX (- 20px ); } to { opacity : 1 ; transform : translateX ( 0 ); }         } .notification { position : fixed; top : 20px ; right : 20px ; padding : 12px 20px ; background-color : var (--accent-color); color : white; border-radius : 8px ; box-shadow : 0 4px 12px rgba ( 0 , 0 , 0 , 0.15 ); z-index : 9999 ; transform : translateX ( 120% ); transition : transform 0.3s ease-out;         } .notification.show { transform : translateX ( 0 );         } .font-size-controls { display : flex; justify-content : center; gap : 10px ; margin-top : 10px ;         } .font-size-controls button { padding : 8px 12px ; font-size : 14px ;         } .input-container { display : flex; margin-top : 20px ; gap : 10px ;         } .input-container input { flex : 1 ; padding : 12px ; border : 1px solid var (--input-border-light); border-radius : 18px ; font-size : 16px ; transition : border-color var (--transition-speed);         } .dark-mode .input-container input { border-color : var (--input-border-dark); background-color : #333 ; color : var (--text-dark);         } .input-container input :focus { border-color : var (--accent-color); outline : none; box-shadow : 0 0 5px rgba ( 0 , 123 , 255 , 0.3 );         } .input-container button { padding : 12px 20px ; font-size : 16px ;         } .scroll-to-bottom { position : absolute; bottom : 20px ; right : 20px ; padding : 10px ; background-color : var (--accent-color); color : white; border : none; border-radius : 50% ; cursor : pointer; box-shadow : var (--button-shadow); transition : background-color var (--transition-speed); display : none;         } .scroll-to-bottom:hover { background-color : var (--accent-hover);         } @media ( max-width : 600px ) { .main-container { margin : 10px ; padding : 15px ;             } .button-toolbar { flex-direction : column; gap : 8px ;             } .button-toolbar button { width : 100% ; min-width : unset;             } .chat-container { max-height : 300px ;             } .message { margin-left : 10% ; margin-right : 10% ;             } .input-container { flex-direction : column;             } .input-container input , .input-container button { width : 100% ;             }         } </style> </head> <body> <div class = "main-container" > <div class = "header" > <h1> CreatiCore </h1> <div class = "version" > verze 2.1 </div> <div class = "message-count" id = "message-count" > Poƒçet zpr√°v: 0 </div> </div> <div class = "button-toolbar" > <button id = "toggle-mode" title = "P≈ôepnout re≈æim (tmav√Ω/svƒõtl√Ω)" aria-label = "P≈ôepnout tmav√Ω/svƒõtl√Ω re≈æim" ><span id = "mode-icon" > üåô </span> Re≈æim </button> <button id = "set-nickname" title = "Nastavit p≈ôezd√≠vku" aria-label = "Nastavit p≈ôezd√≠vku" > üë§ P≈ôezd√≠vka </button> <button id = "ai-settings" title = "Nastaven√≠ AI asistenta" aria-label = "Nastaven√≠ AI asistenta" > ü§ñ AI asistent </button> <button id = "export-chat" title = "Exportovat chat do textov√©ho souboru" aria-label = "Exportovat chat" > üì• Export </button> <button id = "voice-input" title = "Hlasov√Ω vstup" aria-label = "Hlasov√Ω vstup" > üé§ Hlas </button> <button id = "customize-theme" title = "Nastavit vlastn√≠ t√©ma" aria-label = "Nastavit vlastn√≠ t√©ma" > üé® T√©ma </button> <button id = "plugins-btn" title = "Spr√°va plugin≈Ø" aria-label = "Spr√°va plugin≈Ø" > üîå Pluginy </button> <button id = "clear-chat" title = "Vyƒçistit cel√Ω chat" aria-label = "Vyƒçistit chat" > üóëÔ∏è Vyƒçistit </button> </div> <div class = "font-size-controls" > <button id = "font-smaller" aria-label = "Zmen≈°it p√≠smo" > A- </button> <button id = "font-larger" aria-label = "Zvƒõt≈°it p√≠smo" > A+ </button> </div> <div class = "chat-container" id = "chat-container" aria-live = "polite" > <div class = "message user" draggable = "true" ><span class = "category" > Ot√°zka </span> Ahoj, jak se m√°≈°? <div class = "msg-time" > 10.3.2025 14:30 </div></div> <div class = "message bot" draggable = "true" ><span class = "category" > Odpovƒõƒè </span> Ahoj! M√°m se skvƒõle, dƒõkuji! <div class = "msg-time" > 10.3.2025 14:31 </div></div> </div> <button class = "scroll-to-bottom" id = "scroll-to-bottom" title = "Posunout dol≈Ø" aria-label = "Posunout na nejnovƒõj≈°√≠ zpr√°vu" > ‚Üì </button> <div class = "input-container" > <input type = "text" id = "message-input" placeholder = "Napi≈° zpr√°vu... (podporuje **tuƒçn√©** a *kurz√≠vu*)" aria-label = "Vstupn√≠ pole pro zpr√°vu" > <button id = "send-message" aria-label = "Odeslat zpr√°vu" > Odeslat </button> </div> <div class = "notification" id = "new-message-notification" > Nov√° zpr√°va! </div> </div> <script> const fontSmallerBtn = document .getElementById( 'font-smaller' ); const fontLargerBtn = document .getElementById( 'font-larger' ); const clearChatBtn = document .getElementById( 'clear-chat' ); const chatContainer = document .getElementById( 'chat-container' ); const notification = document .getElementById( 'new-message-notification' ); const root = document .documentElement; const scrollToBottomBtn = document .getElementById( 'scroll-to-bottom' ); const messageInput = document .getElementById( 'message-input' ); const sendMessageBtn = document .getElementById( 'send-message' ); const toggleModeBtn = document .getElementById( 'toggle-mode' ); const modeIcon = document .getElementById( 'mode-icon' ); const messageCount = document .getElementById( 'message-count' ); const exportChatBtn = document .getElementById( 'export-chat' ); let messageHistory = []; let historyIndex = -1 ; // Aktualizace poƒçtu zpr√°v         function updateMessageCount() {             const count = chatContainer.querySelectorAll('.message:not(.loading)').length;             messageCount.textContent = `Poƒçet zpr√°v: ${count}`;         }          // Zmƒõna velikosti p√≠sma         fontSmallerBtn.addEventListener('click', () => {             let currentSize = parseFloat(getComputedStyle(root).getPropertyValue('--font-size-base'));             root.style.setProperty('--font-size-base', `${Math.max(currentSize - 2, 12)}px`);         });          fontLargerBtn.addEventListener('click', () => {             let currentSize = parseFloat(getComputedStyle(root).getPropertyValue('--font-size-base'));             root.style.setProperty('--font-size-base', `${Math.min(currentSize + 2, 24)}px`);         });          // Vyƒçi≈°tƒõn√≠ chatu         clearChatBtn.addEventListener('click', () => {             if (confirm('Opravdu chcete vyƒçistit chat?')) {                 chatContainer.innerHTML = '';             messageHistory = [];                 historyIndex = -1;                 updateMessageCount();             }         });          // Drag & drop pro zpr√°vy         let draggedElement = null;          chatContainer.addEventListener('dragstart', (e) => {             if (e.target.classList.contains('message')) {                 draggedElement = e.target;                 e.target.style.opacity = '0.5';             }         });          chatContainer.addEventListener('dragend', (e) => {             if (e.target.classList.contains('message')) {                 e.target.style.opacity = '1';                 draggedElement = null;             }         });          chatContainer.addEventListener('dragover', (e) => {             e.preventDefault();         });          chatContainer.addEventListener('drop', (e) => {             e.preventDefault();             if (draggedElement && e.target.classList.contains('message') && e.target !== draggedElement) {                 const allMessages = Array.from(chatContainer.children);                 const draggedIndex = allMessages.indexOf(draggedElement);                 const dropIndex = allMessages.indexOf(e.target);                  if (draggedIndex < dropIndex) {                     e.target.after(draggedElement);                 } else {                     e.target.before(draggedElement);                 }             }         });          // Oznaƒçen√≠ zpr√°vy jako obl√≠ben√©, p≈ôipnut√≠ a editace         chatContainer.addEventListener('click', (e) => {             const message = e.target.closest('.message');             if (message && !message.classList.contains('loading') && e.ctrlKey) {                 message.classList.toggle('pinned');                 chatContainer.insertBefore(message, chatContainer.firstChild);             } else if (message && !message.classList.contains('loading')) {                 message.classList.toggle('favorite');             }         });          chatContainer.addEventListener('dblclick', (e) => {             const message = e.target.closest('.message');             if (message && !message.classList.contains('bot') && !message.classList.contains('loading')) {                 const textElement = message.querySelector(':not(.msg-time):not(.category)');                 const originalText = textElement.textContent;                 const newText = prompt('Uprav zpr√°vu:', originalText);                 if (newText && newText !== originalText) {                     textElement.innerHTML = formatMessage(newText);                     message.classList.add('edited');                 }             }         });          // Automatick√© scrollov√°n√≠         function scrollToBottom() {             chatContainer.scrollTop = chatContainer.scrollHeight;             scrollToBottomBtn.style.display = 'none';         }          chatContainer.addEventListener('scroll', () => {             const isScrolledToBottom = chatContainer.scrollHeight - chatContainer.scrollTop <= chatContainer.clientHeight + 10;             scrollToBottomBtn.style.display = isScrolledToBottom ? 'none' : 'block';         });          scrollToBottomBtn.addEventListener('click', scrollToBottom);          // Form√°tov√°n√≠ Markdown         function formatMessage(text) {             return text                 .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')                 .replace(/\*(.*?)\*/g, '<em>$1</em>');         }          // Odesl√°n√≠ zpr√°vy a odpovƒõƒè bota         function sendMessage() {             const text = messageInput.value.trim();             if (text) {                 const time = new Date().toLocaleString('cs-CZ', { day: 'numeric', month: 'numeric', year: 'numeric', hour: '2-digit', minute: '2-digit' });                 const category = text.startsWith('?') ? 'Ot√°zka' : 'Zpr√°va';                 const newMessage = document.createElement('div');                 newMessage.className = 'message user';                 newMessage.draggable = true; newMessage.innerHTML = `<span class="category">${category}</span>${formatMessage(text)}<div class="msg-time">${time}</div>`;                 chatContainer.appendChild(newMessage);                 messageHistory.unshift(text);                 historyIndex = -1;                 messageInput.value = '';                 scrollToBottom();                 updateMessageCount();                 showNotification();                  // Odpovƒõƒè bota                 setTimeout(() => {                     const botMessage = document.createElement('div');                     botMessage.className = 'message bot';                     botMessage.draggable = true;                     const botResponse = text.includes('ahoj') ? 'Ahoj! Co je nov√Ωho?' : 'Hmm, to je zaj√≠mav√©!';                     botMessage.innerHTML = `<span class="category">Odpovƒõƒè</span>${formatMessage(botResponse)}<div class="msg-time">${new Date().toLocaleString('cs-CZ', { day: 'numeric', month: 'numeric', year: 'numeric', hour: '2-digit', minute: '2-digit' })}</div>`;                     chatContainer.appendChild(botMessage);                     scrollToBottom();                     updateMessageCount();                     showNotification();                 }, 1000);             }         }          sendMessageBtn.addEventListener('click', sendMessage);         messageInput.addEventListener('keypress', (e) => {             if (e.key === 'Enter') sendMessage();         });          // Historie p≈ô√≠kaz≈Ø         messageInput.addEventListener('keydown', (e) => {             if (e.key === 'ArrowUp' && historyIndex < messageHistory.length - 1) {                 historyIndex++;                 messageInput.value = messageHistory[historyIndex];             } else if (e.key === 'ArrowDown' && historyIndex > -1) {                 historyIndex--;                 messageInput.value = historyIndex === -1 ? '' : messageHistory[historyIndex];             }         });          // P≈ôep√≠n√°n√≠ re≈æimu toggleModeBtn.addEventListener('click', () => {     document.body.classList.toggle('dark-mode');             modeIcon.textContent = document.body.classList.contains('dark-mode') ? ' ‚òÄÔ∏è ' : ' üåô  ';         });          // Notifikace a zvuk         function showNotification() {             notification.classList.add('show');             const audio = new Audio('https://www.soundjay.com/buttons/beep-01a.mp3');             audio.play().catch(() => console.log('Zvuk selhal'));             setTimeout(() => notification.classList.remove('show'), 3000);         }          setTimeout(showNotification, 2000);          // Kl√°vesov√° zkratka pro kop√≠rov√°n√≠ chatu         document.addEventListener('keydown', (e) => {             if (e.ctrlKey && e.key === 'c') {                 const chatText = Array.from(chatContainer.children)                     .map(msg => msg.textContent.trim())                     .join('\n');                 navigator.clipboard.writeText(chatText).then(() => alert('Chat zkop√≠rov√°n do schr√°nky!'));             }         });          // Export chatu jako JSON         exportChatBtn.addEventListener('click', () => {             const messages = Array.from(chatContainer.children).map(msg => ({                 text: msg.querySelector(':not(.msg-time):not(.category)')?.textContent || '',                 time: msg.querySelector('.msg-time')?.textContent || '',                 isUser: msg.classList.contains('user'),                 isBot: msg.classList.contains('bot'),                 isFavorite: msg.classList.contains('favorite'),                 isPinned: msg.classList.contains('pinned'),                 isEdited: msg.classList.contains('edited'),                 category: msg.querySelector('.category')?.textContent || ''             }));             const json = JSON.stringify(messages, null, 2);             const blob = new Blob([json], { type: 'application/json' });             const url = URL.createObjectURL(blob);             const a = document.createElement('a');             a.href = url;             a.download = 'chat-export.json';             a.click();             URL.revokeObjectURL(url);         });          // Inicializace poƒçtu zpr√°v         updateMessageCount();     </script> </body> </html>