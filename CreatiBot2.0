<!DOCTYPE html>
<html lang="cs">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>CreatiCore 2.0.3</title>
  <style>
    :root {
      --background-light: #f8f9fa;
      --background-dark: #1e1e1e;
      --text-light: #333;
      --text-dark: #f8f9fa;
    }
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      background-color: var(--background-light);
      color: var(--text-light);
      transition: background 0.3s, color 0.3s;
    }
    .dark-mode {
      background-color: var(--background-dark);
      color: var(--text-dark);
    }
    .chat-container {
      max-width: 600px;
      margin: 50px auto;
      padding: 20px;
      border-radius: 8px;
      background-color: white;
      box-shadow: 0px 4px 20px rgba(0,0,0,0.1);
      overflow-y: auto;
      max-height: 400px;
    }
    .dark-mode .chat-container {
      background-color: #2a2a2a;
    }
    .message {
      margin: 10px 0;
      padding: 10px;
      border-radius: 5px;
      opacity: 0;
      animation: fadeIn 0.3s forwards;
      word-wrap: break-word;
    }
    .user { background-color: #d1e7dd; text-align: right; }
    .bot { background-color: #cfe2ff; text-align: left; font-style: italic; }
    .dark-mode .user { background-color: #2e7d32; }
    .dark-mode .bot { background-color: #1e88e5; }
    .input-container { display: flex; margin-top: 20px; }
    input { flex: 1; padding: 12px; border: 1px solid #ccc; border-radius: 5px; font-size: 16px; }
    button { padding: 12px 20px; border: none; background-color: #007bff; color: white; border-radius: 5px; cursor: pointer; font-size: 16px; }
    .dark-mode button { background-color: #1565c0; }
    .dark-mode input { background-color: #424242; color: white; border: 1px solid #777; }
    .dark-mode input::placeholder { color: #bbb; }
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
  </style>
</head>
<body>

  <h1 style="text-align:center; font-size: 24px; margin-top: 20px;">CreatiCore 2.0.3</h1>

  <div class="chat-container" id="chat-container" aria-live="polite"></div>

  <div class="input-container">
    <input id="user-input" type="text" placeholder="Zadejte zprávu..." aria-label="Vaše zpráva" />
    <button id="send-btn">Odeslat</button>
  </div>

  <script>
    const chatContainer = document.getElementById('chat-container');
    const userInput = document.getElementById('user-input');
    const sendBtn = document.getElementById('send-btn');

    const loadChatHistory = () => {
      const history = localStorage.getItem('chatHistory');
      if (history) {
        chatContainer.innerHTML = history;
      }
    };

    const saveChatHistory = () => {
      localStorage.setItem('chatHistory', chatContainer.innerHTML);
    };

    const appendMessage = (text, sender) => {
      const message = document.createElement('div');
      message.className = 'message ' + sender;
      const timestamp = new Date().toLocaleTimeString();
      message.innerHTML = `<span>${timestamp}</span><br>${text}`;
      
      chatContainer.appendChild(message);
      chatContainer.scrollTop = chatContainer.scrollHeight;
      saveChatHistory();
      
      if (sender === 'bot' && document.hidden) {
        new Notification('CreatiCore 2.0.3', { body: text });
      }
    };

    const botResponses = {
      'ahoj': 'Nazdar! Jak ti můžu pomoct?',
      'jak se máš': 'Jsem vždy připraven ti pomoct!',
      'pomoc': 'S čím konkrétně potřebuješ pomoct?',
      'co umíš?': 'Můžu ti pomoci s kódováním, poradit s technikou nebo ti říct vtip.',
      'kdo jsi': 'Jsem CreatiCore 2.0.3 – tvůj AI parťák.',
      'datum': `Dnes je ${new Date().toLocaleDateString()}.`,
      'novinky apple': 'Momentálně nemám přístup k novinkám ve světě Apple, ale zeptej se mě na něco jiného!',
      'default': 'To jsem úplně nepochopil. Můžeš to zkusit říct jinak?'
    };

    const getBotResponse = (input) => { input = input.toLowerCase();
      for (let key in botResponses) {
        if (input.includes(key)) {
          return botResponses[key];
        }
      }
      return botResponses['default'];
    };

    const sendMessage = () => {
      const message = userInput.value.trim();
      if (!message) return;
      
      appendMessage(message, 'user');
      userInput.value = '';
      setTimeout(() => {
        appendMessage(getBotResponse(message), 'bot');
      }, 1000);
    };

    sendBtn.addEventListener('click', sendMessage);
    userInput.addEventListener('keydown', (e) => {
      if (e.key === 'Enter') sendMessage();
    });

    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
      document.body.classList.add('dark-mode');
    }

    if ('Notification' in window && Notification.permission !== 'granted') {
      Notification.requestPermission();
    }

    window.onload = loadChatHistory;
  </script>

</body>
</html>