my na web ne on <!DOCTYPE html> <html lang = "cs" > <head> <meta charset = "UTF-8" > <meta name = "viewport" content = "width=device-width, initial-scale=1.0" > <title> CreatiCore 2.0.4 </title> <style> :root { --background-light : #f8f9fa ; --background-dark : #1e1e1e ; --text-light : #333 ; --text-dark : #f8f9fa ;
      } body { font-family : Arial, sans-serif; margin : 0 ; padding : 0 ; background-color : var (--background-light); color : var (--text-light); transition : background 0.3s , color 0.3s ;
      } .dark-mode { background-color : var (--background-dark); color : var (--text-dark);
      } .chat-container { max-width : 600px ; margin : 20px auto; padding : 20px ; border-radius : 8px ; background-color : white; box-shadow : 0px 4px 20px rgba (0, 0, 0, 0.1); overflow-y : auto; max-height : 400px ; position : relative;
      } .dark-mode .chat-container { background-color : #2a2a2a ;
      } .message { margin : 10px 0 ; padding : 10px ; border-radius : 5px ; opacity : 0 ; animation : fadeIn 0.3s forwards; word-wrap : break-word; position : relative; cursor : pointer;
      } .user { background-color : #d1e7dd ; text-align : right;
      } .bot { background-color : #cfe2ff ; text-align : left; font-style : italic;
      } .typing { font-style : italic; color : gray;
      } .msg-time { font-size : 0.8em ; color : #777 ; margin-top : 5px ;
      } .input-container { display : flex; margin-top : 20px ; align-items : center; justify-content : center;
      } /* Styl tlaƒç√≠tek ve vstupn√≠ ƒç√°sti */ #emoji-btn { margin-right : 5px ; font-size : 20px ; background : transparent; border : none; cursor : pointer;
      } input { flex : 1 ; padding : 12px ; border : 1px solid #ccc ; border-radius : 5px ; font-size : 16px ;
      } button { padding : 12px 20px ; border : none; background-color : #007bff ; color : white; border-radius : 5px ; cursor : pointer; font-size : 16px ; transition : background 0.3s , transform 0.1s ; margin : 5px ;
      } button :hover { background-color : #0056b3 ; transform : scale (1.05);
      } @keyframes fadeIn { from { opacity : 0 ; } to { opacity : 1 ; }
      } /* Styl pro vyhled√°vac√≠ pole */ #search-container { max-width : 600px ; margin : 10px auto; display : flex; align-items : center;
      } #search-input { flex : 1 ; padding : 8px ; border : 1px solid #ccc ; border-radius : 5px ; font-size : 16px ;
      } #clear-search { margin-left : 5px ; padding : 8px 12px ; background-color : #dc3545 ; border : none; color : white; border-radius : 5px ; cursor : pointer; font-size : 14px ; transition : background 0.3s , transform 0.1s ;
      } #clear-search :hover { background-color : #c82333 ; transform : scale (1.05);
      } /* Panel emoji */ #emoji-panel { display : none; position : absolute; bottom : 60px ; left : 20px ; background : #fff ; border : 1px solid #ccc ; border-radius : 5px ; padding : 10px ; z-index : 1000 ; box-shadow : 0 2px 8px rgba (0, 0, 0, 0.2);
      } #emoji-panel span { font-size : 20px ; padding : 5px ; cursor : pointer;
      } #emoji-panel span :hover { background-color : #eee ; border-radius : 4px ;
      } /* Kontejner pro ovl√°dac√≠ tlaƒç√≠tka zpr√°vy (reply, smazat, p≈ôeƒç√≠st) */ .msg-controls { position : absolute; right : 5px ; top : 5px ; display : none;
      } .msg-controls button { padding : 2px 6px ; font-size : 12px ; margin-left : 3px ;
      } .message:hover .msg-controls { display : inline-block;
      } /* Tlaƒç√≠tko pro scroll dol≈Ø */ #scroll-to-bottom { display : none; position : absolute; bottom : 10px ; right : 10px ; padding : 8px 12px ; font-size : 14px ; background-color : #007bff ; color : white; border : none; border-radius : 4px ; cursor : pointer; z-index : 500 ;
      } /* Styl tlaƒç√≠tka pro zru≈°en√≠ √∫pravy */ #cancel-edit { padding : 12px 20px ; border : none; background-color : #6c757d ; color : white; border-radius : 5px ; cursor : pointer; font-size : 16px ; margin : 5px ; display : none; transition : background 0.3s , transform 0.1s ;
      } #cancel-edit :hover { background-color : #5a6268 ; transform : scale (1.05);
      } /* Panel pro vlastn√≠ t√©ma */ #theme-panel { display : none; position : fixed; top : 50% ; left : 50% ; transform : translate (-50%, -50%); background : var (--background-light); border : 1px solid #ccc ; padding : 20px ; border-radius : 8px ; z-index : 10000 ; box-shadow : 0 2px 10px rgba (0,0,0,0.3);
      } #theme-panel h3 { margin-top : 0 ;
      } #theme-panel label { font-size : 14px ;
      } #theme-panel input [type="color"] { margin : 0 10px ; vertical-align : middle;
      } </style> </head> <body> <h1 style = "text-align:center; font-size: 24px; margin-top: 20px;" > CreatiCore 2.0.4 </h1> <div style = "text-align:center;" > <button id = "toggle-mode" title = "P≈ôepnout re≈æim (tmav√Ω/svƒõtl√Ω)" > P≈ôepnout re≈æim </button> <button id = "set-nickname" title = "Nastavit p≈ôezd√≠vku" > Nastavit p≈ôezd√≠vku </button> <button id = "edit-last" title = "Upravit posledn√≠ zpr√°vu" > Upravit posledn√≠ zpr√°vu </button> <button id = "export-chat" title = "Exportovat chat do textov√©ho souboru" > Exportovat chat </button> <button id = "voice-input" title = "Hlasov√Ω vstup" > Hlasov√Ω vstup </button> <button id = "customize-theme" title = "Nastavit vlastn√≠ t√©ma" > Nastavit t√©ma </button> </div> <!-- Kontejner pro vyhled√°v√°n√≠ s tlaƒç√≠tkem vyƒçi≈°tƒõn√≠ --> <div id = "search-container" > <input id = "search-input" type = "text" placeholder = "Hledat zpr√°vy..." aria-label = "Vyhled√°v√°n√≠ zpr√°v" title = "Hledat zpr√°vy" /> <button id = "clear-search" title = "Vyƒçistit vyhled√°v√°n√≠" > Vyƒçistit </button> </div> <div class = "chat-container" id = "chat-container" aria-live = "polite" > <button id = "scroll-to-bottom" title = "Posunout se na konec chatu" > Scroll to bottom </button> </div> <div class = "input-container" > <button id = "emoji-btn" title = "Vybrat emoji" > üòä </button> <!-- Atribut autofocus zajist√≠, ≈æe kurzor bude ihned ve vstupn√≠m poli --> <input id = "user-input" type = "text" placeholder = "Zadejte zpr√°vu..." aria-label = "Va≈°e zpr√°va" autofocus /> <button id = "send-btn" title = "Odeslat zpr√°vu" > Odeslat </button> <button id = "cancel-edit" title = "Zru≈°it √∫pravu zpr√°vy" > Zru≈°it √∫pravu </button> </div> <!-- Panel pro v√Ωbƒõr emoji --> <div id = "emoji-panel" > <span> üòä </span> <span> üòÉ </span> <span> üòÇ </span> <span> üòç </span> <span> üò¢ </span> <span> üëç </span> <span> ‚ù§Ô∏è </span> <span> üòé </span> <span> ü§î </span> <span> üôå </span> </div> <!-- Panel pro vlastn√≠ t√©ma --> <div id = "theme-panel" > <h3> Nastavit vlastn√≠ t√©ma </h3> <div> <label for = "bg-color" > Barva pozad√≠: </label> <input type = "color" id = "bg-color" name = "bg-color" value = "#f8f9fa" > </div> <br> <div> <label for = "text-color" > Barva textu: </label> <input type = "color" id = "text-color" name = "text-color" value = "#333333" > </div> <br> <button id = "save-theme" > Ulo≈æit t√©ma </button> <button id = "cancel-theme" > Zru≈°it </button> </div> <!-- Patiƒçka s odkazem na autora titulk≈Ø --> <footer style = "text-align: center; margin-top: 20px; font-size: 14px;" > Titulky vytvo≈ôil <a href = "http://johnyxcz.blogspot.com" target = "_blank" > JohnyX </a> </footer> <script> let nickname = localStorage.getItem( "nickname" ) || "U≈æivatel" ; const chatContainer = document .getElementById( "chat-container" ); const userInput = document .getElementById( "user-input" ); const sendBtn = document .getElementById( "send-btn" ); const toggleModeBtn = document .getElementById( "toggle-mode" ); const setNicknameBtn = document .getElementById( "set-nickname" ); const exportChatBtn = document .getElementById( "export-chat" ); const voiceInputBtn = document .getElementById( "voice-input" ); const searchInput = document .getElementById( "search-input" ); const clearSearchBtn = document .getElementById( "clear-search" ); const editLastBtn = document .getElementById( "edit-last" ); const cancelEditBtn = document .getElementById( "cancel-edit" ); const emojiBtn = document .getElementById( "emoji-btn" ); const emojiPanel = document .getElementById( "emoji-panel" ); const scrollToBottomBtn = document .getElementById( "scroll-to-bottom" ); const customizeThemeBtn = document .getElementById( "customize-theme" ); const themePanel = document .getElementById( "theme-panel" ); const bgColorInput = document .getElementById( "bg-color" ); const textColorInput = document .getElementById( "text-color" ); const saveThemeBtn = document .getElementById( "save-theme" ); const cancelThemeBtn = document .getElementById( "cancel-theme" ); let autoScroll = true ; // Stav √∫pravy posledn√≠ zpr√°vy let editingMode = false; let editingMessage = null ; // Naƒçten√≠ ulo≈æen√©ho vlastn√≠ho t√©matu (pokud existuje) const applyCustomTheme = () => { const customBg = localStorage.getItem( "customBgColor" ); const customText = localStorage.getItem( "customTextColor" ); if (customBg) { document .documentElement.style.setProperty( "--background-light" , customBg);
        } if (customText) { document .documentElement.style.setProperty( "--text-light" , customText);
        }
      };
      applyCustomTheme(); // Nastaven√≠ tmav√©ho/svƒõtl√©ho re≈æimu z localStorage if (localStorage.getItem( "darkMode" ) === "enabled" ) { document .body.classList.add( "dark-mode" );
      }
      toggleModeBtn.addEventListener( "click" , () => { document .body.classList.toggle( "dark-mode" );
        localStorage.setItem( "darkMode" , document .body.classList.contains( "dark-mode" ) ? "enabled" : "disabled" );
      }); // Nastaven√≠ p≈ôezd√≠vky pomoc√≠ promptu setNicknameBtn.addEventListener( "click" , () => { const newNick = prompt( "Zadejte novou p≈ôezd√≠vku:" , nickname); if (newNick) {
          nickname = newNick;
          localStorage.setItem( "nickname" , nickname);
          alert( "P≈ôezd√≠vka zmƒõnƒõna na: " + nickname);
        }
      }); // Export chatu do textov√©ho souboru exportChatBtn.addEventListener( "click" , () => { let chatText = "" ; const messages = document .querySelectorAll( ".chat-container .message" );
        messages.forEach(msg => {
          chatText += msg.innerText + "\n" ;
        }); const blob = new Blob([chatText], { type : "text/plain" }); const url = URL.createObjectURL(blob); const a = document .createElement( "a" );
        a.href = url;
        a.download = "chat_history.txt" ;
        a.click();
        URL.revokeObjectURL(url);
      }); // Hlasov√Ω vstup (pokud je podporov√°n) if ( 'webkitSpeechRecognition' in window || 'SpeechRecognition' in window ) { const SpeechRecognition = window .SpeechRecognition || window .webkitSpeechRecognition; const recognition = new SpeechRecognition();
        recognition.lang = "cs-CZ" ;
        recognition.interimResults = false ;
        recognition.maxAlternatives = 1 ;
        voiceInputBtn.addEventListener( "click" , () => {
          recognition.start();
        });
        recognition.onresult = (event) => { const transcript = event.results[ 0 ][ 0 ].transcript;
          userInput.value = transcript;
        };
        recognition.onerror = (event) => {
          alert( "Chyba rozpozn√°v√°n√≠ hlasu: " + event.error);
        };
      } else {
        voiceInputBtn.disabled = true ;
        voiceInputBtn.innerText = "Hlasov√Ω vstup nepodporov√°n" ;
      } // Vyhled√°v√°n√≠ zpr√°v ‚Äì filtruje zpr√°vy podle textu searchInput.addEventListener( "input" , () => { const filter = searchInput.value.toLowerCase(); const messages = document .querySelectorAll( ".chat-container .message" );
        messages.forEach(msg => {
          msg.style.display = msg.innerText.toLowerCase().includes(filter) ? "block" : "none" ;
        });
      }); // Tlaƒç√≠tko pro vyƒçi≈°tƒõn√≠ vyhled√°vac√≠ho pole clearSearchBtn.addEventListener( "click" , () => {
        searchInput.value = "" ; const messages = document .querySelectorAll( ".chat-container .message" );
        messages.forEach(msg => {
          msg.style.display = "block" ;
        });
      }); // Auto-scroll lock: pokud u≈æivatel scrolluje, zobraz√≠ se tlaƒç√≠tko pro posun na konec chatContainer.addEventListener( "scroll" , () => { const threshold = 10 ; if (chatContainer.scrollTop < chatContainer.scrollHeight - chatContainer.offsetHeight - threshold) {
          autoScroll = false ;
          scrollToBottomBtn.style.display = "block" ;
        } else {
          autoScroll = true ;
          scrollToBottomBtn.style.display = "none" ;
        }
      });
      scrollToBottomBtn.addEventListener( "click" , () => {
        chatContainer.scrollTop = chatContainer.scrollHeight;
        autoScroll = true ;
        scrollToBottomBtn.style.display = "none" ;
      }); // Naƒç√≠t√°n√≠ a ukl√°d√°n√≠ historie chatu jako JSON const loadChatHistory = () => { const history = JSON .parse(localStorage.getItem( "chatHistory" )) || [];
        history.forEach(({ sender, text }) => appendMessage(text, sender, false ));
      }; const saveChatHistory = () => { const messages = Array .from(chatContainer.children)
          .filter(el => el.classList.contains( "message" ))
          .map(msg => { const sender = msg.classList.contains( "user" ) ? "user" : "bot" ; return { sender, text : msg.innerHTML };
          });
        localStorage.setItem( "chatHistory" , JSON .stringify(messages));
      }; // Pravideln√© ukl√°d√°n√≠ chatu ka≈æd√Ωch 10 sekund window .addEventListener( "load" , () => {
        setInterval(saveChatHistory, 10000 );
      }); // Jednoduch√Ω Markdown parser s podporou emotikon≈Ø const parseMarkdown = (text) => {
        text = convertEmojis(text);
        text = text.replace( /&/g , "&amp;" ).replace( /</g , "&lt;" ).replace( />/g , "&gt;" );
        text = text.replace( /`([^`]+)`/g , '<code>$1</code>' );
        text = text.replace( /\*\*([^*]+)\*\*/g , '<strong>$1</strong>' );
        text = text.replace( /\*([^*]+)\*/g , '<em>$1</em>' );
        text = text.replace( /(https?:\/\/[^\s]+)/g , '<a href="$1" target="_blank">$1</a>' ); return text;
      }; const convertEmojis = (text) => {
        text = text.replace( /:\)/g , " üòä " );
        text = text.replace( /:\(/g , " üòû " );
        text = text.replace( /:D/g , " üòÉ " ); return text;
      }; // Funkce pro p≈ôehr√°n√≠ kr√°tk√©ho notifikaƒçn√≠ho zvuku pomoc√≠ Web Audio API const playNotificationSound = () => { try { const audioCtx = new ( window .AudioContext || window .webkitAudioContext)(); const oscillator = audioCtx.createOscillator(); const gainNode = audioCtx.createGain();
          oscillator.type = "sine" ;
          oscillator.frequency.value = 600 ;
          gainNode.gain.value = 0.1 ;
          oscillator.connect(gainNode);
          gainNode.connect(audioCtx.destination);
          oscillator.start();
          setTimeout(() => {
            oscillator.stop();
            audioCtx.close();
          }, 150 );
        } catch (e) { console .log( "Notifikaƒçn√≠ zvuk se nepoda≈ôilo p≈ôehr√°t:" , e);
        }
      }; // Funkce pro zobrazen√≠ upozornƒõn√≠ "Zkop√≠rov√°no!" p≈ôi kop√≠rov√°n√≠ zpr√°vy const showCopyTooltip = (message) => { const tooltip = document .createElement( "div" );
        tooltip.innerText = "Zkop√≠rov√°no!" ;
        tooltip.style.position = "absolute" ;
        tooltip.style.backgroundColor = "rgba(0, 0, 0, 0.7)" ; tooltip.style.color = "#fff" ;
        tooltip.style.padding = "4px 8px" ;
        tooltip.style.borderRadius = "4px" ;
        tooltip.style.fontSize = "12px" ;
        tooltip.style.top = "5px" ;
        tooltip.style.right = "10px" ;
        tooltip.style.opacity = "1" ;
        tooltip.style.transition = "opacity 1s ease-out" ;
        message.appendChild(tooltip);
        setTimeout(() => {
          tooltip.style.opacity = "0" ;
        }, 1000 );
        setTimeout(() => { if (tooltip.parentNode) tooltip.parentNode.removeChild(tooltip);
        }, 2000 );
      }; // P≈ôid√° ovl√°dac√≠ tlaƒç√≠tka (reply, smazat, p≈ôeƒç√≠st) do zpr√°vy const addMessageControls = (message) => { const controls = document .createElement( "div" );
        controls.className = "msg-controls" ; const replyBtn = document .createElement( "button" );
        replyBtn.innerText = "Odpovƒõdƒõt" ;
        replyBtn.addEventListener( "click" , (e) => {
          e.stopPropagation(); const content = message.querySelector( ".msg-content" ).innerText;
          userInput.value = `> ${content} \n` ;
          userInput.focus();
        }); const deleteBtn = document .createElement( "button" );
        deleteBtn.innerText = "Smazat" ;
        deleteBtn.addEventListener( "click" , (e) => {
          e.stopPropagation();
          message.remove();
          saveChatHistory();
        }); // Tlaƒç√≠tko pro p≈ôeƒçten√≠ zpr√°vy nahlas const readBtn = document .createElement( "button" );
        readBtn.innerText = "P≈ôeƒç√≠st" ;
        readBtn.title = "P≈ôeƒç√≠st zpr√°vu nahlas" ;
        readBtn.addEventListener( "click" , (e) => {
          e.stopPropagation(); const textToRead = message.querySelector( ".msg-content" ).innerText; const utterance = new SpeechSynthesisUtterance(textToRead);
          utterance.lang = "cs-CZ" ; window .speechSynthesis.speak(utterance);
        });
        
        controls.appendChild(replyBtn); controls.appendChild(deleteBtn);
        controls.appendChild(readBtn);
        message.appendChild(controls);
      }; const appendMessage = (text, sender, save = true ) => { const message = document .createElement( "div" );
        message.className = "message " + sender; const timeStamp = new Date ().toLocaleTimeString(); const content = parseMarkdown(text);
        message.innerHTML = `<div class="msg-content"> ${content} </div><div class="msg-time"> ${timeStamp} </div>` ;
        chatContainer.appendChild(message); if (autoScroll) chatContainer.scrollTop = chatContainer.scrollHeight;
        addMessageControls(message); if (save) saveChatHistory();
        message.addEventListener( "dblclick" , () => {
          navigator.clipboard.writeText(message.innerText);
          showCopyTooltip(message);
          message.style.backgroundColor = "#ffeeba" ;
          setTimeout(() => {
            message.style.backgroundColor = sender === "user" ? "#d1e7dd" : "#cfe2ff" ;
          }, 500 );
        });
      }; // Definice odpovƒõd√≠ bota const botResponses = { "ahoj" : "Nazdar! Jak ti m≈Ø≈æu pomoct?" , "jak se m√°≈°" : "Jsem v≈ædy p≈ôipraven ti pomoct!" , "pomoc" : "S ƒç√≠m konkr√©tnƒõ pot≈ôebuje≈° pomoct?" , "co um√≠≈°?" : "M≈Ø≈æu ti pomoci s k√≥dov√°n√≠m, poradit s technikou nebo ti ≈ô√≠ct vtip." , "kdo jsi" : "Jsem CreatiCore 2.0.4 ‚Äì tv≈Øj AI par≈•√°k." , "datum" : `Dnes je ${ new Date ().toLocaleDateString()} .` , "/help" : "Dostupn√© p≈ô√≠kazy: /clear - Vymaz√°n√≠ chatu, /nick - Zmƒõna p≈ôezd√≠vky, /time - Aktu√°ln√≠ ƒças, /joke - N√°hodn√Ω vtip" , "/nick" : "Pou≈æij p≈ô√≠kaz /nick [nov√© jm√©no] pro zmƒõnu p≈ôezd√≠vky." , "/time" : `Aktu√°ln√≠ ƒças je ${ new Date ().toLocaleTimeString()} .` , "/joke" : "To se mi nepovedlo naj√≠t, zkuste to znovu." , "default" : "To jsem √∫plnƒõ nepochopil. M≈Ø≈æe≈° to zkusit ≈ô√≠ct jinak?" }; const jokes = [ "Proƒç program√°to≈ôi nenos√≠ hodinky? Proto≈æe ƒças je relativn√≠." , "Kolik program√°tor≈Ø je pot≈ôeba k v√Ωmƒõnƒõ ≈æ√°rovky? ≈Ω√°dn√Ω, to je hardwarov√Ω probl√©m!" , "Proƒç program√°to≈ôi miluj√≠ p≈ô√≠rodu? Proto≈æe m√° spoustu strom≈Ø (trees)!" ]; const getBotResponse = (input) => {
        input = input.toLowerCase(); if (input.startsWith( "/nick " )) {
          nickname = input.split( " " )[ 1 ] || "U≈æivatel" ;
          localStorage.setItem( "nickname" , nickname); return `P≈ôezd√≠vka zmƒõnƒõna na " ${nickname} ".` ;
        } if (input === "/clear" ) { if (confirm( "Opravdu chcete vymazat chat?" )) {
            chatContainer.innerHTML = "" ;
            localStorage.removeItem( "chatHistory" ); return "Chat byl vymaz√°n." ;
          } else { return "Vymaz√°n√≠ chatu zru≈°eno." ;
          }
        } if (input === "/joke" ) { return jokes[ Math .floor( Math .random() * jokes.length)];
        } return botResponses[input] || botResponses[ "default" ]; }; // Emoji picker: tlaƒç√≠tko otev√≠r√°/skryje panel; kliknut√≠m na emoji se p≈ôid√° do vstupn√≠ho pole emojiBtn.addEventListener( "click" , () => {
        emojiPanel.style.display = (emojiPanel.style.display === "none" || emojiPanel.style.display === "" ) ? "block" : "none" ;
      });
      emojiPanel.querySelectorAll( "span" ).forEach(emoji => {
        emoji.addEventListener( "click" , () => {
          userInput.value += emoji.innerText;
          userInput.focus();
        });
      }); // Funkce odesl√°n√≠ zpr√°vy s podporou √∫pravy posledn√≠ zpr√°vy const sendMessage = () => { const message = userInput.value.trim(); if (!message) return ; if (editingMode && editingMessage) { const contentDiv = editingMessage.querySelector( ".msg-content" );
          contentDiv.innerHTML = parseMarkdown( `<strong> ${nickname} :</strong> ${message} ` ); const timeDiv = editingMessage.querySelector( ".msg-time" );
          timeDiv.innerText = new Date ().toLocaleTimeString();
          editingMode = false ;
          editingMessage = null ;
          userInput.value = "" ;
          cancelEditBtn.style.display = "none" ;
          saveChatHistory(); return ;
        }
        appendMessage( `<strong> ${nickname} :</strong> ${message} ` , "user" );
        userInput.value = "" ; const typingMessage = document .createElement( "div" );
        typingMessage.className = "message bot typing" ;
        typingMessage.innerText = "Bot p√≠≈°e..." ;
        chatContainer.appendChild(typingMessage); if (autoScroll) chatContainer.scrollTop = chatContainer.scrollHeight;
        setTimeout(() => {
          chatContainer.removeChild(typingMessage);
          appendMessage(getBotResponse(message), "bot" );
          playNotificationSound();
        }, 1000 );
      };
      sendBtn.addEventListener( "click" , sendMessage);
      userInput.addEventListener( "keydown" , (e) => { if (e.key === "Enter" ) sendMessage(); // Stisk Esc zru≈°√≠ re≈æim √∫prav, pokud je aktivn√≠ if (e.key === "Escape" && editingMode) {
          editingMode = false ;
          editingMessage = null ;
          userInput.value = "" ;
          cancelEditBtn.style.display = "none" ;
        }
      }); // Umo≈æn√≠ √∫pravu posledn√≠ zpr√°vy ‚Äì naƒçte obsah posledn√≠ u≈æivatelsk√© zpr√°vy do vstupu editLastBtn.addEventListener( "click" , () => { const userMessages = document .querySelectorAll( ".chat-container .message.user" ); if (userMessages.length === 0 ) {
          alert( "≈Ω√°dn√° zpr√°va k √∫pravƒõ." ); return ;
        }
        editingMessage = userMessages[userMessages.length - 1 ]; const contentDiv = editingMessage.querySelector( ".msg-content" ); if (contentDiv) { let fullText = contentDiv.innerText; const prefix = nickname + ": " ; if (fullText.startsWith(prefix)) {
            fullText = fullText.substring(prefix.length);
          } userInput.value = fullText;
          editingMode = true ;
          cancelEditBtn.style.display = "inline-block" ;
          userInput.focus();
        }
      }); // Tlaƒç√≠tko pro zru≈°en√≠ √∫prav cancelEditBtn.addEventListener( "click" , () => {
        editingMode = false ;
        editingMessage = null ;
        userInput.value = "" ;
        cancelEditBtn.style.display = "none" ;
        userInput.focus();
      }); // Obsluha panelu pro vlastn√≠ t√©ma customizeThemeBtn.addEventListener( "click" , () => { // Naƒçteme aktu√°ln√≠ barvy nebo nastav√≠me v√Ωchoz√≠ bgColorInput.value = localStorage.getItem( "customBgColor" ) || "#f8f9fa" ;
        textColorInput.value = localStorage.getItem( "customTextColor" ) || "#333333" ;
        themePanel.style.display = "block" ;
      });
      cancelThemeBtn.addEventListener( "click" , () => {
        themePanel.style.display = "none" ;
      });
      saveThemeBtn.addEventListener( "click" , () => { const newBgColor = bgColorInput.value; const newTextColor = textColorInput.value; document .documentElement.style.setProperty( "--background-light" , newBgColor); document .documentElement.style.setProperty( "--text-light" , newTextColor);
        localStorage.setItem( "customBgColor" , newBgColor);
        localStorage.setItem( "customTextColor" , newTextColor);
        themePanel.style.display = "none" ;
      }); window .onload = () => {
        loadChatHistory();
        userInput.focus();
      }; </script> </body> </html>